// Generated by gencpp from file cg_mrslam/Edge.msg
// DO NOT EDIT!


#ifndef CG_MRSLAM_MESSAGE_EDGE_H
#define CG_MRSLAM_MESSAGE_EDGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cg_mrslam
{
template <class ContainerAllocator>
struct Edge_
{
  typedef Edge_<ContainerAllocator> Type;

  Edge_()
    : idFrom(0)
    , idTo(0)
    , estimate()
    , information()  {
      estimate.assign(0.0);

      information.assign(0.0);
  }
  Edge_(const ContainerAllocator& _alloc)
    : idFrom(0)
    , idTo(0)
    , estimate()
    , information()  {
  (void)_alloc;
      estimate.assign(0.0);

      information.assign(0.0);
  }



   typedef int32_t _idFrom_type;
  _idFrom_type idFrom;

   typedef int32_t _idTo_type;
  _idTo_type idTo;

   typedef boost::array<double, 3>  _estimate_type;
  _estimate_type estimate;

   typedef boost::array<double, 6>  _information_type;
  _information_type information;




  typedef boost::shared_ptr< ::cg_mrslam::Edge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cg_mrslam::Edge_<ContainerAllocator> const> ConstPtr;

}; // struct Edge_

typedef ::cg_mrslam::Edge_<std::allocator<void> > Edge;

typedef boost::shared_ptr< ::cg_mrslam::Edge > EdgePtr;
typedef boost::shared_ptr< ::cg_mrslam::Edge const> EdgeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cg_mrslam::Edge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cg_mrslam::Edge_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cg_mrslam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'cg_mrslam': ['/home/liby3/catkin_ws_lby/src/cg_mrslam/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cg_mrslam::Edge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cg_mrslam::Edge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cg_mrslam::Edge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cg_mrslam::Edge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cg_mrslam::Edge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cg_mrslam::Edge_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cg_mrslam::Edge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "384fe2e5bedbc35780991580d2e3ab00";
  }

  static const char* value(const ::cg_mrslam::Edge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x384fe2e5bedbc357ULL;
  static const uint64_t static_value2 = 0x80991580d2e3ab00ULL;
};

template<class ContainerAllocator>
struct DataType< ::cg_mrslam::Edge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cg_mrslam/Edge";
  }

  static const char* value(const ::cg_mrslam::Edge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cg_mrslam::Edge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 idFrom\n\
int32 idTo\n\
float64[3] estimate\n\
float64[6] information\n\
";
  }

  static const char* value(const ::cg_mrslam::Edge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cg_mrslam::Edge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.idFrom);
      stream.next(m.idTo);
      stream.next(m.estimate);
      stream.next(m.information);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Edge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cg_mrslam::Edge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cg_mrslam::Edge_<ContainerAllocator>& v)
  {
    s << indent << "idFrom: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idFrom);
    s << indent << "idTo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idTo);
    s << indent << "estimate[]" << std::endl;
    for (size_t i = 0; i < v.estimate.size(); ++i)
    {
      s << indent << "  estimate[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.estimate[i]);
    }
    s << indent << "information[]" << std::endl;
    for (size_t i = 0; i < v.information.size(); ++i)
    {
      s << indent << "  information[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.information[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CG_MRSLAM_MESSAGE_EDGE_H
