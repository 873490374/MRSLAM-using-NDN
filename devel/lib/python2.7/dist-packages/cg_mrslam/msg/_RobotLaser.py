# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cg_mrslam/RobotLaser.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotLaser(genpy.Message):
  _md5sum = "b8902142cac87a16bb07fb5598e39ab0"
  _type = "cg_mrslam/RobotLaser"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 nodeId
float64[] readings
float64 minAngle
float64 angleInc
float64 maxRange
float64 accuracy"""
  __slots__ = ['nodeId','readings','minAngle','angleInc','maxRange','accuracy']
  _slot_types = ['int32','float64[]','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nodeId,readings,minAngle,angleInc,maxRange,accuracy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotLaser, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nodeId is None:
        self.nodeId = 0
      if self.readings is None:
        self.readings = []
      if self.minAngle is None:
        self.minAngle = 0.
      if self.angleInc is None:
        self.angleInc = 0.
      if self.maxRange is None:
        self.maxRange = 0.
      if self.accuracy is None:
        self.accuracy = 0.
    else:
      self.nodeId = 0
      self.readings = []
      self.minAngle = 0.
      self.angleInc = 0.
      self.maxRange = 0.
      self.accuracy = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.nodeId))
      length = len(self.readings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.readings))
      _x = self
      buff.write(_struct_4d.pack(_x.minAngle, _x.angleInc, _x.maxRange, _x.accuracy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nodeId,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.readings = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.minAngle, _x.angleInc, _x.maxRange, _x.accuracy,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.nodeId))
      length = len(self.readings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.readings.tostring())
      _x = self
      buff.write(_struct_4d.pack(_x.minAngle, _x.angleInc, _x.maxRange, _x.accuracy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nodeId,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.readings = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.minAngle, _x.angleInc, _x.maxRange, _x.accuracy,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_4d = struct.Struct("<4d")
