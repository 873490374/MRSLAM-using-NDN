# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cg_mrslam/SLAM.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cg_mrslam.msg
import std_msgs.msg

class SLAM(genpy.Message):
  _md5sum = "70b623315e98c3f1c102abd4f25f9c4c"
  _type = "cg_mrslam/SLAM"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Common to al types
Header header
int32 robotId
int32 type

#For Combo Messages
RobotLaser laser
VSE2[] vertices

#For Condensed Graph Messages
Edge[] edges
int32[] closures
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: cg_mrslam/RobotLaser
int32 nodeId
float64[] readings
float64 minAngle
float64 angleInc
float64 maxRange
float64 accuracy
================================================================================
MSG: cg_mrslam/VSE2
int32 id
float64[3] estimate
================================================================================
MSG: cg_mrslam/Edge
int32 idFrom
int32 idTo
float64[3] estimate
float64[6] information"""
  __slots__ = ['header','robotId','type','laser','vertices','edges','closures']
  _slot_types = ['std_msgs/Header','int32','int32','cg_mrslam/RobotLaser','cg_mrslam/VSE2[]','cg_mrslam/Edge[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robotId,type,laser,vertices,edges,closures

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SLAM, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robotId is None:
        self.robotId = 0
      if self.type is None:
        self.type = 0
      if self.laser is None:
        self.laser = cg_mrslam.msg.RobotLaser()
      if self.vertices is None:
        self.vertices = []
      if self.edges is None:
        self.edges = []
      if self.closures is None:
        self.closures = []
    else:
      self.header = std_msgs.msg.Header()
      self.robotId = 0
      self.type = 0
      self.laser = cg_mrslam.msg.RobotLaser()
      self.vertices = []
      self.edges = []
      self.closures = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.robotId, _x.type, _x.laser.nodeId))
      length = len(self.laser.readings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.laser.readings))
      _x = self
      buff.write(_struct_4d.pack(_x.laser.minAngle, _x.laser.angleInc, _x.laser.maxRange, _x.laser.accuracy))
      length = len(self.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.vertices:
        buff.write(_struct_i.pack(val1.id))
        buff.write(_struct_3d.pack(*val1.estimate))
      length = len(self.edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.edges:
        _x = val1
        buff.write(_struct_2i.pack(_x.idFrom, _x.idTo))
        buff.write(_struct_3d.pack(*val1.estimate))
        buff.write(_struct_6d.pack(*val1.information))
      length = len(self.closures)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.closures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.laser is None:
        self.laser = cg_mrslam.msg.RobotLaser()
      if self.vertices is None:
        self.vertices = None
      if self.edges is None:
        self.edges = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.robotId, _x.type, _x.laser.nodeId,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.laser.readings = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.laser.minAngle, _x.laser.angleInc, _x.laser.maxRange, _x.laser.accuracy,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vertices = []
      for i in range(0, length):
        val1 = cg_mrslam.msg.VSE2()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 24
        val1.estimate = _struct_3d.unpack(str[start:end])
        self.vertices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.edges = []
      for i in range(0, length):
        val1 = cg_mrslam.msg.Edge()
        _x = val1
        start = end
        end += 8
        (_x.idFrom, _x.idTo,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 24
        val1.estimate = _struct_3d.unpack(str[start:end])
        start = end
        end += 48
        val1.information = _struct_6d.unpack(str[start:end])
        self.edges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.closures = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.robotId, _x.type, _x.laser.nodeId))
      length = len(self.laser.readings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.laser.readings.tostring())
      _x = self
      buff.write(_struct_4d.pack(_x.laser.minAngle, _x.laser.angleInc, _x.laser.maxRange, _x.laser.accuracy))
      length = len(self.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.vertices:
        buff.write(_struct_i.pack(val1.id))
        buff.write(val1.estimate.tostring())
      length = len(self.edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.edges:
        _x = val1
        buff.write(_struct_2i.pack(_x.idFrom, _x.idTo))
        buff.write(val1.estimate.tostring())
        buff.write(val1.information.tostring())
      length = len(self.closures)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.closures.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.laser is None:
        self.laser = cg_mrslam.msg.RobotLaser()
      if self.vertices is None:
        self.vertices = None
      if self.edges is None:
        self.edges = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.robotId, _x.type, _x.laser.nodeId,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.laser.readings = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.laser.minAngle, _x.laser.angleInc, _x.laser.maxRange, _x.laser.accuracy,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vertices = []
      for i in range(0, length):
        val1 = cg_mrslam.msg.VSE2()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 24
        val1.estimate = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        self.vertices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.edges = []
      for i in range(0, length):
        val1 = cg_mrslam.msg.Edge()
        _x = val1
        start = end
        end += 8
        (_x.idFrom, _x.idTo,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 24
        val1.estimate = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 48
        val1.information = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
        self.edges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.closures = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_i = struct.Struct("<i")
_struct_3i = struct.Struct("<3i")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
